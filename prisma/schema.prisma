// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  customer
  department_head
  finance_officer
  purchasing_officer
  admin
  inventory
}

model GeneralInfo {
  id Int @id @default(autoincrement())
  name String @unique
  type  String
}


model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  sessions       Session[]
  role           Role           @default(customer)
  department     Department?    @relation(fields: [department_id], references: [id])
  location       Location?      @relation(fields: [location_id], references: [id])
  department_id  Int?
  location_id    Int?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Location {
  id                      Int                  @id @default(autoincrement())
  building  String?
  floor                   Int
  room_number             String
  description             String?
  users                   User[]
  total_quantity          Float?               @default(0)
  update_date             DateTime?            @default(now())
  items                   Item[]
  order_requests    OrderRequest[]
  location_moving_request LocationMoveRequest?
  short_code  String
  department Department? @relation(fields: [department_id], references: [id])
  department_id Int?
}

model Department {
  id                   Int     @id @default(autoincrement())
  name                 String @unique
  users                User[]
  locations       Location[]
  budget               Float?
  dean_email String?
}

model CommentBy {
  id            Int          @id @default(autoincrement())
  order_request OrderRequest @relation(fields: [orderId], references: [id])
  orderId       Int
  comment       String
  user          String
  role          String
}

model ApprovalBy {
  id            Int          @id @default(autoincrement())
  order_request OrderRequest @relation(fields: [orderId], references: [id])
  orderId       Int
  user          String
  role          String
}

model OrderType {
  id   Int    @id @default(autoincrement())
  type String @db.VarChar(100)
}

model OrderItem {
  id               Int          @id @default(autoincrement())
  name             String
  quotation        String?
  quantity         Float?       @default(1.0)
  quantity_unit    String? @default("other") 
  unit_price       Float?
  vat              Float?
  total_price      Float?
  type             String
  order_request    OrderRequest @relation(fields: [order_request_id], references: [id])
  order_request_id Int
  added_inventory Boolean @default(false)
}

model OrderRequest {
  id                Int               @id @default(autoincrement())
  purchase_reason   String?
  order_status      String?       @default("Pending")
  approval_status   Boolean           @default(false)
  approval_by       ApprovalBy[]
  purchasing_action String?
  total_price       Float?
  vat               Float?
  order_date        DateTime? @default(now())
  purchased_date  DateTime?
  desired_date      DateTime?
  action_number     String?
  order_items       OrderItem[]
  location           Location              @relation(fields: [location_id], references: [id])
  location_id        Int
  remark            String?
  comment_by        CommentBy[]
}

model Item {
  id                         Int                  @id @default(autoincrement())
  name                       String
  description                String?
  price                      Float?
  order_date                 DateTime?
  isAsset Boolean @default(false)
  depreciation               DateTime?
  type                       String? 
  quantity                   Float?
  quantity_unit              String?              @db.VarChar(27) 
  location                   Location             @relation(fields: [location_id], references: [id])

  location_id                Int
  target_location_request    LocationMoveRequest? @relation(fields: [target_location_request_id], references: [id])
  target_location_request_id Int? @unique
  code                       String?
  action_number              String?
  order_reference String?
}

model LocationMoveRequest {
  id                Int      @id @default(autoincrement())
  item             Item? 
  previous_location String
  target_location   Location @relation(fields: [location_id], references: [id])
  location_id       Int      @unique
  approve Int @default(0)
}


model CodeName {
  id Int @id @default(autoincrement())
  name String @unique
  code  String @unique
  codeType String
}

model Log {
  id Int @id @default(autoincrement())
  model String
  message String
  operation String
  user String
  timestamp DateTime @default(now())
}

